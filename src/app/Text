{
  /* Cropping Canvas and Frame */
}
<div className="relative bottom-[20%] z-40 flex flex-col items-center">
  {/* Wrapper for the canvas */}
  <div className="relative">
    {/* Cropping Canvas */}
    <canvas
      className="shadow-lg rounded-3xl max-w-full max-h-full mx-auto"
      ref={cropRef}
    ></canvas>

    {/* Corner Borders - Positioned Outside the Canvas */}
    <div className="absolute top-[-12px] left-[-12px] w-12 h-12 border-t-4 border-l-4 border-blue-500 rounded-tl-3xl animate-scanner-top-left"></div>
    <div className="absolute top-[-12px] right-[-12px] w-12 h-12 border-t-4 border-r-4 border-blue-500 rounded-tr-3xl animate-scanner-top-right"></div>
    <div className="absolute bottom-[-12px] left-[-12px] w-12 h-12 border-b-4 border-l-4 border-blue-500 rounded-bl-3xl animate-scanner-bottom-left"></div>
    <div className="absolute bottom-[-12px] right-[-12px] w-12 h-12 border-b-4 border-r-4 border-blue-500 rounded-br-3xl animate-scanner-bottom-right"></div>
  </div>
</div>;

("use client");

import React, { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import { LuScanLine } from "react-icons/lu";

export default function Home() {
  const videoRef = useRef(null);
  // const [fullscreen, setFullscreen] = useState<boolean>(false);
  const photoRef = useRef(null);
  const cropRef = useRef(null);
  const [isVisible, setIsVisible] = useState(false);
  // const [orientation, setOrientation] = useState("portrait");
  const [cleanBase64, setBase64] = useState("");
  const [send, setData] = useState(false);
  // const [winWidth, setWidth] = useState(null);
  // const [winHeight, setHeight] = useState(null);
  const [change, setchange] = useState(false);
  const [items, setItem] = useState([]);
  const [scannedText, setScannedText] = useState("");
  const [selected, setSelected] = useState("");
  const router = useRouter();

  const getVideo = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: "environment",
        },
      });

      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.play();

        // Apply autofocus if supported
        const videoTrack = stream.getVideoTracks()[0];
        const capabilities = videoTrack.getCapabilities();
        const settings = videoTrack.getSettings();

        if (
          capabilities.focusMode &&
          capabilities.focusMode.includes("continuous")
        ) {
          await videoTrack.applyConstraints({
            advanced: [{ focusMode: "continuous" }],
          });
          console.log("Autofocus applied:", settings.focusMode);
        } else {
          console.warn("Autofocus is not supported on this device.");
        }
      }
    } catch (error) {
      console.error("Error getting video stream", error);
    }
  };

  const analyzeImage = async (base64Image) => {
    console.log("entered url");
    const GOOGLE_API_KEY = process.env.NEXT_PUBLIC_API_KEY;
    const endpoint = `https://vision.googleapis.com/v1/images:annotate?key=${GOOGLE_API_KEY}`;

    const requestBody = {
      requests: [
        {
          image: {
            content: base64Image, // Base64 image data
          },
          features: [
            {
              type: "DOCUMENT_TEXT_DETECTION", // Feature type
            },
          ],
        },
      ],
    };

    try {
      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json", // Ensure JSON content type
        },
        body: JSON.stringify(requestBody), // Send the request body
      });

      const data = await response.json();
      if (response.ok && items) {
        const word = data.responses[0].fullTextAnnotation.text;
        if (!word) return;
        setScannedText(word); // Set the scanned text to the state
        setIsVisible(true);
        console.log(word);
        console.log(items);
      } else {
        console.error("Error from API:", data.error.message);
      }
    } catch (error) {
      setIsVisible(false);
    }
  };

  const takePhoto = () => {
    console.log("clicked");
    if (!videoRef.current || !photoRef.current) return;
    if (typeof window !== "undefined") {
      // Define the dimensions of the area of interest (scanner box)
      const boxWidth = 160; // width of the scanner box in pixels
      const boxHeight = 160; // height of the scanner box in pixels

      const video = videoRef.current;
      const photo = photoRef.current;
      if (!photo)
        return () => {
          console.error("Can not opencanvas");
        };
      const offsetX = (video.videoWidth - boxWidth) / 2; // X offset for centering
      const offsetY = (video.videoHeight - boxHeight) / 2; // Y offset for centering
      photo.width = boxWidth;
      photo.height = boxHeight;

      const ctx = photo.getContext("2d");
      if (!ctx)
        return () => {
          console.error("Can not opencanvas");
        };
      ctx.clearRect(0, 0, boxWidth, boxHeight);
      ctx.drawImage(
        video,
        offsetX, // Source X
        offsetY, // Source Y
        boxWidth, // Source width
        boxHeight, // Source height
        0, // Destination X
        0, // Destination Y
        boxWidth, // Destination width
        boxHeight // Destination height
      );
      setIsVisible(true);
      const image = photo.toDataURL("image/base64", 0.5);
      const imgData = image.split(",")[1];
      setBase64(imgData);
      console.log(cleanBase64);
      setData(true);
    } else {
    }
  };

  const drawScannedTextToCanvas = () => {
    const canvas = photoRef.current;
    if (canvas) {
      const ctx = canvas.getContext("2d");

      // Define canvas dimensions and styling
      const padding = 20; // Padding around the text
      const maxWidth = 100; // Max width of the canvas
      const lineHeight = 20; // Line height for text

      // Calculate canvas height based on text lines
      const lines = scannedText.split("\n");
      const canvasHeight = lines.length * lineHeight + padding * 2;
      lines.forEach((x) => {
        const w = x.toLocaleLowerCase();
        if (items.includes(w)) {
          setSelected(w);
        }
      });
      // Set canvas size
      canvas.width = maxWidth;
      canvas.height = canvasHeight;

      // Clear the canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw the background with rounded corners and shadow
      ctx.fillStyle = "#ffffff";
      ctx.strokeStyle = "#dddddd";
      ctx.lineWidth = 2;
      ctx.shadowColor = "rgba(0, 0, 0, 0.2)";
      ctx.shadowBlur = 10;
      ctx.shadowOffsetX = 4;
      ctx.shadowOffsetY = 4;

      ctx.beginPath();
      const radius = 10; // Rounded corner radius
      ctx.moveTo(radius, 0);
      ctx.arcTo(canvas.width, 0, canvas.width, canvas.height, radius);
      ctx.arcTo(canvas.width, canvas.height, 0, canvas.height, radius);
      ctx.arcTo(0, canvas.height, 0, 0, radius);
      ctx.arcTo(0, 0, canvas.width, 0, radius);
      ctx.closePath();
      ctx.fill();
      ctx.stroke();

      // Reset shadow for text
      ctx.shadowBlur = 0;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;

      // Draw the text
      ctx.fillStyle = "#333333";
      ctx.font = "bold 30px Arial";
      ctx.textAlign = "center";

      // Loop through each line and draw
      lines.forEach((line, index) => {
        const y = padding + lineHeight * (index + 1);
        ctx.fillText(line, canvas.width / 2, y);
      });

      // Add animation for a "pop-out" effect
      canvas.style.transition = "transform 0.3s ease-out";
      canvas.style.transform = "scale(1.1)";
      setTimeout(() => {
        canvas.style.transform = "scale(1)";
      }, 300);

      // Center and display the canvas
      canvas.style.position = "absolute";
      canvas.style.top = "50%";
      canvas.style.left = "50%";
      canvas.style.transform = "translate(-50%, -50%)"; // Fix for perfect centering
      canvas.style.borderRadius = "15px";
      canvas.style.boxShadow = "0 10px 20px rgba(0, 0, 0, 0.2)";
      canvas.style.background = "#ffffff";
      canvas.style.zIndex = 100;
    }
  };

  const drawToCanvas = () => {
    const video = videoRef.current;

    if (video) {
      const drawFrame = () => {
        const canvas = cropRef.current;
        const boxWidth = 320; // width of the scanner box in pixels
        const boxHeight = 320; // height of the scanner box in pixel
        if (!canvas) return;
        canvas.width = boxWidth;
        canvas.height = boxHeight;

        const ctx = canvas.getContext("2d");
        const offsetX = (video.videoWidth - boxWidth) / 2; // X offset for centering
        const offsetY = (video.videoHeight - boxHeight) / 2; // Y offset for centering
        // Draw the current video frame to the canvas
        ctx.drawImage(
          video,
          offsetX, // Source X
          offsetY, // Source Y
          boxWidth, // Source width
          boxHeight, // Source height
          0, // Destination X
          0, // Destination Y
          boxWidth, // Destination width
          boxHeight // Destination height
        );
        // Continue drawing frames
        requestAnimationFrame(drawFrame);
      };

      drawFrame();
    }
  };

  if (change) {
    console.log("pagechange");
  } else {
  } // Add your else condition here if needed.

  if (send) {
    analyzeImage(cleanBase64);
    setData(false);
  } else {
  }

  useEffect(() => {
    fetch("/data.json")
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        console.log("Data fetched:", data);
        setItem(data.words || []);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  }, []);

  useEffect(() => {
    if (scannedText) {
      drawScannedTextToCanvas(); // Draw the text to the canvas when available
    }
  }, [scannedText]);

  useEffect(() => {
    if (typeof window !== "undefined") {
      getVideo();
    } else {
    }
  }, []);

  useEffect(() => {
    if (typeof window !== "undefined") {
      drawToCanvas();
    } else {
    }
  }, [videoRef]);

  useEffect(() => {
    if (!change) return;
    router.push("/model");
    setchange(false);
  }, [router, change]);

  return (
    <div className="relative flex justify-center items-center h-screen bg-gray-600">
      {/* Video Stream */}
      <video
        className="absolute w-full h-full inset-0"
        ref={videoRef}
        autoPlay
        playsInline
        muted
      />

      {/* Overlay */}
      <div className="absolute inset-0 bg-black bg-opacity-40 backdrop-blur-2xl z-10"></div>

      {/* Photo Canvas */}
      <canvas
        className={`absolute z-30 ${
          isVisible ? "block" : "hidden"
        }  transform top-12 size-fit`}
        ref={photoRef}
      ></canvas>

      {/* Cropping Canvas and Frame */}
      <div className="relative bottom-[20%] z-40 flex flex-col items-center">
        {/* Wrapper for the canvas */}
        <div className="relative">
          {/* Cropping Canvas */}
          <canvas
            className="shadow-lg rounded-3xl max-w-full max-h-full mx-auto"
            ref={cropRef}
          ></canvas>

          {/* Corner Borders - Positioned Outside the Canvas */}
          <div className="absolute top-[-12px] left-[-12px] w-12 h-12 border-t-4 border-l-4 border-blue-500 rounded-tl-3xl animate-scanner-top-left"></div>
          <div className="absolute top-[-12px] right-[-12px] w-12 h-12 border-t-4 border-r-4 border-blue-500 rounded-tr-3xl animate-scanner-top-right"></div>
          <div className="absolute bottom-[-12px] left-[-12px] w-12 h-12 border-b-4 border-l-4 border-blue-500 rounded-bl-3xl animate-scanner-bottom-left"></div>
          <div className="absolute bottom-[-12px] right-[-12px] w-12 h-12 border-b-4 border-r-4 border-blue-500 rounded-br-3xl animate-scanner-bottom-right"></div>
        </div>
      </div>

      {/* Button Section */}
      <div className="absolute bottom-10 z-40 w-full flex justify-center">
        <button
          className="flex items-center gap-3 bg-blue-600 text-white font-bold rounded-full px-6 py-2 shadow-md hover:bg-blue-500 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-300"
          onClick={takePhoto}
        >
          <LuScanLine size={28} />
          <span className="text-lg">Click to Scan</span>
        </button>
      </div>
    </div>
  );
}
